`timescale 1ns / 1ps
////////////////////////////////////////////////////////////////////////////////
// Company		: 
// Engineer		: 	
// Create Date	: 2017.05.11
// Design Name	: 
// Module Name	: sdfifo_ctrl
// Project Name	: 
// Target Device: Cyclone 	
// Tool versions: Quartus 13.1
// Description	: SDRAM fifoï¿½ï¿½ï¿½ï¿½Ä£ï¿½ï¿½						
//				
// Revision		: V1.0
// Additional Comments	:  
// 
////////////////////////////////////////////////////////////////////////////////
module sdfifo_ctrl(
				clk_40m			,
				clk_50m			,
				clk_100m		,
				rst_n			,
				wrf_din			,
				wrf_wrreq		,
				sdram_wr_ack	,
				wrf_empty		,
				/*sys_addr,*/
				sys_data_in		,
				sdram_wr_req	,
				
				
				sys_data_out	,
				rdf_rdreq		,
				sdram_rd_ack	,
				rdf_dout		,
				rd_en			,
				rd_ack			,
				sdram_rd_req	,
				sdram_busy		,
				rd_ack_falg		,
				rdempty_flag
				
			);

input clk_40m					;	//	PLLï¿½ï¿½ï¿½ï¿½40MHzÊ±ï¿½ï¿½
input clk_50m					;	//	PLLï¿½ï¿½ï¿½ï¿½50MHzÊ±ï¿½ï¿½
input clk_100m					;	// 	ï¿½ï¿½ï¿½ß¶ï¿½Ê±ï¿½ï¿½
input rst_n						;

	//wrfifo
input[15:0] wrf_din;		//sdramï¿½ï¿½ï¿½ï¿½Ð´ï¿½ë»ºï¿½ï¿½FIFOï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
input wrf_wrreq;			//sdramï¿½ï¿½ï¿½ï¿½Ð´ï¿½ë»ºï¿½ï¿½FIFOï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ó£¬¸ï¿½ï¿½ï¿½Ð§
input sdram_wr_ack;			//ÏµÍ³Ð´SDRAMï¿½ï¿½Ó¦ï¿½Åºï¿½,ï¿½ï¿½ÎªwrFIFOï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð§ï¿½Åºï¿½
output wrf_empty	;		//Ð´FIFOï¿½Õ±ï¿½Ö¾ï¿½ï¿½ï¿½ï¿½FIFOï¿½ï¿½Ê±ï¿½ï¿½ï¿½â²¿ï¿½ï¿½ï¿½Ý¿ï¿½Ð´ï¿½ï¿½FIFO

output[15:0] sys_data_in;	//sdramï¿½ï¿½ï¿½ï¿½Ð´ï¿½ë»ºï¿½ï¿½FIFOï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß£ï¿½ï¿½ï¿½Ð´SDRAMÊ±ï¿½ï¿½ï¿½ï¿½ï¿½Ý´ï¿½ï¿½ï¿½
output sdram_wr_req;		//ÏµÍ³Ð´SDRAMï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½

	//rdfifo
input[15:0] sys_data_out;	//sdramï¿½ï¿½ï¿½Ý¶ï¿½ï¿½ï¿½FIFOï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
input rdf_rdreq;			//sdramï¿½ï¿½ï¿½Ý¶ï¿½ï¿½ï¿½FIFOï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ó£¬¸ï¿½ï¿½ï¿½Ð§
input sdram_rd_ack;			//ÏµÍ³ï¿½ï¿½SDRAMï¿½ï¿½Ó¦ï¿½Åºï¿½,ï¿½ï¿½ÎªrdFIFOï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½Ð§ï¿½Åºï¿½

input		 rd_en			;//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
output	wire	 rd_ack			;//ï¿½ï¿½ï¿½Ö¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä·ï¿½ï¿½ï¿½Öµ ï¿½ï¿½ï¿½ï¿½Ð§ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
output[15:0] rdf_dout;		//sdramï¿½ï¿½ï¿½Ý¶ï¿½ï¿½ï¿½FIFOï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
output sdram_rd_req;		//ÏµÍ³ï¿½ï¿½SDRAMï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½

input sdram_busy;			//SDRAMÃ¦ï¿½ï¿½Ö¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½SDRAMï¿½ï¿½Ã¦Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´

output		rdempty_flag;//ï¿½ï¿½FIFOï¿½Õ±ï¿½Ö¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½rd_ad_stuts
output		rd_ack_falg		; 

wire		wrfull;
parameter rd_length = 1023;
//ï¿½Ïµï¿½500usï¿½ï¿½Ê±ï¿½È´ï¿½sdramï¿½ï¿½ï¿½ï¿½
reg[15:0] delay;	//1msï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

always @(posedge clk_40m or negedge rst_n)
	if(!rst_n) delay <= 16'd0;
	else if(delay < 16'd40000) delay <= delay+1'b1;

wire delay_done = (delay == 16'd40000);	//1msï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½


//------------------------------------------------
wire[5:0] wrf_use;			//sdramï¿½ï¿½ï¿½ï¿½Ð´ï¿½ë»ºï¿½ï¿½FIFOï¿½ï¿½ï¿½Ã´æ´¢ï¿½Õ¼ï¿½ï¿½ï¿½ï¿?
(*keep*)wire[11:0] rdf_use;			//sdramï¿½ï¿½ï¿½Ý¶ï¿½ï¿½ï¿½FIFOï¿½ï¿½ï¿½Ã´æ´¢ï¿½Õ¼ï¿½ï¿½ï¿½ï¿?

//assign sys_addr = 22'h1a9e21;	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
assign sdram_wr_req = ((wrf_use >= 6'd8)  & delay_done);	//FIFOï¿½ï¿½8ï¿½ï¿½16bitï¿½ï¿½ï¿½Ý£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´SDRAMï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½
//assign sdram_rd_req = ((rdf_use <= rd_length)  & delay_done & rd_en);	//sdramÐ´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½FIFOï¿½ï¿½ï¿½Õ£ï¿½256ï¿½ï¿½16bitï¿½ï¿½ï¿½Ý£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½SDRAMï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½
//assign sdram_rd_req = ((!wrfull)  & delay_done & rd_en);	//sdramÐ´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½FIFOï¿½ï¿½ï¿½Õ£ï¿½256ï¿½ï¿½16bitï¿½ï¿½ï¿½Ý£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½SDRAMï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½
assign sdram_rd_req = ( delay_done & rd_en);	//sdramÐ´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½FIFOï¿½ï¿½ï¿½Õ£ï¿½256ï¿½ï¿½16bitï¿½ï¿½ï¿½Ý£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½SDRAMï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½


//assign	rd_ack_falg = (rdf_use >= rd_length)?1'b1:1'b0;//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ïµ?kï¿½ï¿½Ö¾
assign	rd_ack_falg = wrfull;//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ïµ?kï¿½ï¿½Ö¾
reg		rd_ack_reg;


wire	rd_ack_reg_clk40m;//40M Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½


//always@(posedge clk_40m)
	//rd_ack <= rd_ack_falg;
/* always@(posedge clk_40m)
	if(rd_ack_falg == 1'b1 && rd_ack_reg == 1'b0)
	rd_ack <= 1'b1;
	else
	rd_ack <= 1'b0; */
	//rd_ack <= rd_ack_falg  & ~rd_ack_reg;
	
assign	rd_ack = wrfull;




//------------------------------------------------
//ï¿½ï¿½ï¿½ï¿½SDRAMÐ´ï¿½ï¿½ï¿½ï¿½ï¿½Ý»ï¿½ï¿½ï¿½FIFOÄ£ï¿½ï¿½
 wrfifo	uut_wrfifo (
	.wrclk 		( clk_40m 		),
	.wrreq 		( wrf_wrreq 	),
	.data 		( wrf_din 		),	//[15:0]
	.wrempty 	( 			 	),
	.wrfull 	( 			 	),
	.wrusedw 	( 		 		),	//[15:0]
	
	.rdclk 		( clk_50m 		),
	.rdreq 		( sdram_wr_ack 	),	
	.q 			( sys_data_in 	),
	.rdempty 	( wrf_empty		),
	.rdfull 	( 			 	),
	.rdusedw 	( wrf_use		),

	);


//------------------------------------------------
//ï¿½ï¿½ï¿½ï¿½SDRAMï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý»ï¿½ï¿½ï¿½FIFOÄ£ï¿½ï¿½
rdfifo	uut_rdfifo (
	.data 		( sys_data_out 	),
	.wrclk 		( clk_50m 		),
	.wrreq 		( sdram_rd_ack 	),
	.wrempty 	( 	 			),
	.wrfull 	( wrfull	 	),
	.wrusedw 	( rdf_use 		),//[11:0]	
	.q 			( rdf_dout 		),
	.rdclk 		( clk_100m 		),
	.rdreq 		( rdf_rdreq 	),	
	.rdempty 	( rdempty_flag 	),
	.rdfull 	( rdfull_sig 	),
	.rdusedw 	( rdusedw_sig 	)

	);

endmodule
